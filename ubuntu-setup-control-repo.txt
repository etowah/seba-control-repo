#
# Setup seba control repo in an offline pod
#
# Sets up POD apt, docker, helm, and oar repositories. 
#
# Done offline with no internet. 
# Could also be run while packaging hosts with internet available.
#

# Login to a physical host that already has libvirt and virtinst installed, networking and bridging setup
# Become root on physical host.  Import the versioned seba-control-repo qcow image template.

sudo bash

~/seba-control-repo/scripts/vol-import.sh seba-control-repo-vX.qcow2 seba-control-repo

virsh autostart seba-control-repo


# Console login to to newly started seba-control-repo and verify network connectivity. 
# The built in username is sdn 

virsh console seba-control-repo
ip addr
ping 10.242.11.1

# exit and ssh into seba-control-repo



# Ensure mgmt vm and dns ready, see setup-mgmtvm.txt.
# repo.seba.local should be added to your POD's local dns server.

# login to seba-control-repo vm as a "non-root-user". sdn user setup by default in template qcow image 

# Make sure whatever your "non-root-user" user exists on seba-control-repo and
# all 3 destination node hosts that will have k8s installed.  seba-control-repo already has a built
# in non-root-user called sdn.

# Also make sure that on all 3 destination node hosts the non-root-user can 
# sudo to root without password.  The following must be the bottom of /etc/sudoers 
# non-root-user ALL=(ALL:ALL) NOPASSWD:ALL

# For example on each host using a user called "sdn" as the non-root-user:
# useradd -m -d /home/sdn -s /bin/bash sdn
# passwd sdn
# export EDITOR=vi; visudo
# ...
# sdn ALL=(ALL:ALL) NOPASSWD:ALL

# the seba-control-repo vm qcow file uses the sdn user



# SSH and run from the seba-control-repo vm instance...

# Generate needed SSH keyed authentication as non-root-user (sdn). needed for ansible
cd ~/
ssh-keygen -t rsa

# Replace with 3 IP of your to be installed k8s hosts.  Replace non-root-user with username 
# that exists on to be installed k8s hosts.  Replace 10.242.11.X with your 3 to be installed k8s hosts
# This pre-shared ssh key is needed for ansible to work

declare -a IPS=(10.242.11.1 10.242.11.2 10.242.11.3)
for i in ${IPS[@]}; do cat ~/.ssh/id_rsa.pub | ssh non-root-user@$i 'mkdir -p ~/.ssh/; cat >> ~/.ssh/authorized_keys'; done


# Install versioned seba-control-repo.tgz. Pull from external storage or scp copy in
cd ~/
tar -zxvf seba-control-repo.tgz 

# Generate pod CA key.
# Generate pod docker-repo key
cp -a ~/seba-control-repo/seba-pod-ca ~/
cd ~/seba-pod-ca/

# setup CA dir structure
mkdir -p issued
mkdir -p ca/private
mkdir -p ca/newcerts
touch ca/index.txt
echo 00 > ca/serial

# generate and self sign CA
openssl req -config seba-pod-ca-selfsign.cnf -new -newkey rsa:4096 -nodes -keyout ca/private/ca.key -out ca/ca.csr
openssl ca -config seba-pod-ca-certauth.cnf -out ca/ca.crt -days 3650 -keyfile ca/private/ca.key -selfsign -extensions v3_ca -infiles ca/ca.csr

# generate docker repo key and csr
openssl req -config docker-repo.cnf -new -newkey rsa:4096 -nodes -keyout issued/docker-repo.key -out issued/docker-repo.csr

# sign docker repo csr, generate cert, from ca
openssl ca -config seba-pod-ca-certauth.cnf -keyfile ca/private/ca.key -cert ca/ca.crt -policy policy_anything -days 3650 -in issued/docker-repo.csr -out issued/docker-repo.crt

# Install ca locally
sudo cp ~/seba-pod-ca/ca/ca.crt /usr/local/share/ca-certificates/seba-pod-ca.crt
sudo update-ca-certificates 
sudo systemctl restart docker


# Setup Docker repo.  Adding key/cert allows docker-repo to start
sudo cp ~/seba-pod-ca/issued/docker-repo.key /var/docker-persist/docker-registry/certs
sudo cp ~/seba-pod-ca/issued/docker-repo.crt /var/docker-persist/docker-registry/certs

sudo systemctl start docker-repo
sudo systemctl enable docker-repo


# Fill docker repo with images.  Unpack tarball on external storage if needed.  
# Possibly via usb passthrough on host or nfs?  use virsh hotplug, similar to this:
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/virtualization_administration_guide/sect-managing_guest_virtual_machines_with_virsh-attaching_and_updating_a_device_with_virsh
# Mount to /mnt within guest vm. where /mnt/docker-images lists the image tar files.  

# Or if you can scp in the 30GB tarfile, unpack and use with the load-docker-images script:
cd ~/
tar -xvf docker-images.tar
cd ~/seba-control-repo/
scripts/load-docker-images.sh ~/docker-images/
scripts/populate-docker-repo.sh seba-imagelist.txt
scripts/populate-docker-repo.sh kubespray-imagelist.txt

# Alternatively if control-repo vm happens to have internet connectivity (for example system being prepared then shipped)
# you can add skip the load-docker-images and just run populate-docker-repo with a 'pull' argument.
cd ~/seba-control-repo/
scripts/populate-docker-repo.sh seba-imagelist.txt pull
scripts/populate-docker-repo.sh kubespray-imagelist.txt pull


# Setup helm repository.  Pull from external storage or scp copy in
cd ~/
tar -zxvf helm-charts.tgz
sudo cp ~/charts/* /var/www/html/charts/
sudo helm repo index --url http://repo.seba.local/charts/ /var/www/html/charts/


# Setup onos oar app on web server. Pull from external storage or scp copy in
cd ~/
tar -zxvf onos-oar.tgz
sudo cp ~/oar/* /var/www/html/oar/


# Unpack apt repository and deb files.  Pull from external storage or scp copy in
cd ~/
tar -zxvf apt-repo.tgz
sudo cp -a ~/repo/* /var/www/html/repo/


# Unpack k8s kubespray package files. Pull from external storage or scp copy in
cd ~/
tar -zxvf k8s-files.tgz
sudo cp -a ~/k8s/* /var/www/html/k8s/


# From here the repositories are ready and k8s can be installed using the kubespray method.  See install-k8s.txt
