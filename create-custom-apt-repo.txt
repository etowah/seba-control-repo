# To generate a custom repo from scratch there are multiple stages. Start from 2 if you are simply generating a release.

# Repo building
# 	1) Generate lists of packages for the buildrepo.sh script. The results of this are committed and don't need to be repeated.
#
# Repo Generation whle online
@ 	2) Download and sign .deb files - Online setup
# 	3) Create and sign an apt repository directory - 
# 	4) Package repo and key into tar file
#
# Repo Installation, can be offline
# 	5) Untar archive and make the repo and key availble via http

# 1) Generate lists of packages

# There are different approaches to this, but the one I have found to be effective for our case:
# On a machine with the same version and config as the install target, get the currently installed packages

apt list --installed > apt-packages.txt

# Install the desired package and get the list of packages afterwards

sudo apt install <package>
apt list --installed > apt-packages-<package>.txt

# Run scripts/generate-diff-package-list.sh to create the list file

./scripts/generate-diff-package-list.sh apt-packages.txt apt-packages-<package.txt > install-<pacakge>.list

# This file can be used with buildrepo.sh when you download the .deb files.

# 2) Download and sign .deb files

git clone https://github.com/etowah/seba-control-repo
cd seba-control-repo

# Add the docker repo

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable"

# copy scripts/buildrepo.sh and scripts/apt-mirror-lists/install-*.sh to some directory to download the .debs.

sudo apt update
sudo mkdir -p /opt/apt-mirror/download
sudo chown -R foundry /opt/apt-mirror/
cp scripts/buildrepo.sh scripts/apt-mirror-lists/install-*.list /opt/apt-mirror/download/
cd /opt/apt-mirror/download
sudo apt install dpkg-dev -y
./buildrepo.sh

# Create gpg key to use for signing. Select to generate option 1, the default. Enter valid name and email when prompted
# Sign the files

gpg --gen-key
sudo apt install -y dpkg-sig libterm-readkey-perl;
dpkg-sig --sign builder *.deb -p

# If it tells you need more entropy, you can sign in on another terminal and run this:

sudo apt install rng-tools
sudo rngd -r /dev/urandom

# 3) Create and sign an apt repository directory

# Create a directory to story the repo somewhere

cd /opt/apt-mirror/
mkdir repo
cd repo
mkdir conf
echo "Origin: apt-mirror
Label: apt repository
Codename: xenial
Architectures: amd64
Components: stable
Description: docker/ubuntu package repo
SignWith: yes
Pull: xenial" > conf/distributions

# Now create the repo

sudo apt install -y reprepro
reprepro --ask-passphrase -Vb . includedeb xenial /opt/apt-mirror/download/*.deb

# export the public key
gpg --armor --export <email> --output > /opt/apt-mirror/repo/key

# 4) Package up repo and public key
# This can be skipped if the repo was built on the target server

tar -czvf ~/apt-repo.tar.gz -C /opt/apt-mirror/signed-repo/ .

# 5) Untar the package on the offline machine and make the repo we created accessible on http.

sudo mkdir -p /opt/apt-mirror/repo
sudo chown -R foundry /opt/apt-mirror/
tar -xzvf apt-repo.tar.gz -C /opt/apt-mirror/repo/

# In the web server root, create symbolic links that points to the repo and key

ln -s /opt/apt-mirror/repo /var/www/html/repo

# The install target can access it with:

wget -O - http://repo.seba.local/repo/key | sudo apt-key add -
sudo add-apt-repository "deb http://repo.seba.local/repo xenial stable" 
