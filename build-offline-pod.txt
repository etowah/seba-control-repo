#
# Build Offline POD.  
#
# Sets up POD apt, docker, helm, and oar repositories.  Also uses ansible to install kubernetes
#
# Done offline with no internet.  TODO: kubespray still needs internet!!
# Could also be run while packaging hosts with internet available.
#


# setup control-repo vm.  Run qcow file from recently setup physical host.  
# virt-install or virt-manager (GUI) works for this.

# Ensure mgmt vm and dns ready.
# add repo.seba.local to your POD's local dns server.
# cheat with repo.seba.local /etc/hosts entries if needed

# login to control-repo vm as a "non-root-user".  Set IP needed for POD host access.

# Make sure whatever your "non-root-user" user exists on control-repo and all 3 hosts
# that will have k8s installed.


# Generate needed SSH keyed authentication. needed for ansible
cd ~/
ssh-keygen -t rsa
# Replace with 3 IP of your to be installed k8s hosts.  Replace non-root-user with username 
# that exists on to be installed k8s hosts.
declare -a IPS=(10.64.1.181 10.64.1.167 10.64.1.193)
for i in ${IPS[@]}; do cat ~/.ssh/id_rsa.pub | ssh non-root-user@$i 'cat >> ~/.ssh/authorized_keys'; done


# unpack seba-control-repo.  copied from usb or scp in.  Possibly already included in qcow file
cd ~/
tar -zxvf seba-control-repo.tgz


# Generate pod CA key.
# Generate pod docker-repo key
cp -a ~/seba-control-repo/seba-pod-ca ~/
cd ~/seba-pod-ca/

# setup CA dir structure
mkdir -p issued
mkdir -p ca/private
mkdir -p ca/newcerts
touch ca/index.txt
echo 00 > ca/serial

# generate and self sign CA
openssl req -config seba-pod-ca-selfsign.cnf -new -newkey rsa:4096 -nodes -keyout ca/private/ca.key -out ca/ca.csr
openssl ca -config seba-pod-ca-certauth.cnf -out ca/ca.crt -days 3650 -keyfile ca/private/ca.key -selfsign -extensions v3_ca -infiles ca/ca.csr

# generate docker repo key and csr
openssl req -config docker-repo.cnf -new -newkey rsa:4096 -nodes -keyout issued/docker-repo.key -out issued/docker-repo.csr

# sign docker repo csr, generate cert, from ca
openssl ca -config seba-pod-ca-certauth.cnf -keyfile ca/private/ca.key -cert ca/ca.crt -policy policy_anything -days 3650 -in issued/docker-repo.csr -out issued/docker-repo.crt

# Install ca locally
sudo cp ~/seba-pod-ca/ca/ca.crt /usr/local/share/ca-certificates/seba-pod-ca.crt
sudo update-ca-certificates 
sudo systemctl restart docker


# Setup Docker repo.  Adding key/cert allows docker-repo to start
sudo cp ~/seba-pod-ca/issued/docker-repo.key /var/docker-persist/docker-registry/certs
sudo cp ~/seba-pod-ca/issued/docker-repo.crt /var/docker-persist/docker-registry/certs

sudo systemctl start docker-repo


# Fill docker repo with images.  Unpack tarball on external storage if needed.  
# Possibly via usb passthrough on host or nfs?  use virsh hotplug, similar to this:
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/virtualization_administration_guide/sect-managing_guest_virtual_machines_with_virsh-attaching_and_updating_a_device_with_virsh
# Mount to /mnt within guest vm. where /mnt/docker-images lists the image tar files.  

# Or if you can scp in the 20GB tarfile, unpack and use with the load-docker-images script:
cd ~/
tar -xvf docker-images.tar
cd ~/seba-control-repo/
scripts/load-docker-images.sh ~/docker-images/
scripts/populate-docker-repo.sh seba-imagelist.txt

# Alternatively if control-repo vm happens to have internet connectivity (for example system being prepared then shipped)
# you can add skip the load-docker-images and just run populate-docker-repo with a 'pull' argument.
cd ~/seba-control-repo/
scripts/populate-docker-repo.sh seba-imagelist.txt pull


# Setup helm repository.  Pull from external storage or scp copy in
cd ~/
tar -zxvf ~/seba-control-repo/helm-charts.tgz
sudo cp ~/charts/* /var/www/html/charts/
sudo helm repo index --url http://repo.seba.local/charts/ /var/www/html/charts/


# Setup onos oar app on web server
cd ~/
tar -zxvf ~/seba-control-repo/onos-oar.tgz
sudo cp ~/oar/* /var/www/html/oar/


# Install seba-pod specific inventory and configuration
cd ~/kubespray-2.7.0/inventory/
cp -a ~/seba-control-repo/seba-pod ~/kubespray-2.7.0/inventory/
# modify 3 k82 hosts in hosts.ini, replace 10.64.1.X with yours.
echo ${IPS[@]}
vi seba-pod/hosts.ini


## Run the ansible kubespray kubernetes installation.  Takes about 12 minutes. ***STILL NEEDS INTERNET***! 
cd ~/kubespray-2.7.0/
ansible-playbook -i inventory/seba-pod/hosts.ini --become --become-user=root cluster.yml


# Ansible commands to configure all 3 k8s hosts

# Verify k8s.  All 3 hosts must be able to lookup services
ansible -i inventory/seba-pod/hosts.ini kube-node -a "dig +short kubernetes.default.svc.cluster.local @10.233.0.3"


# Copy needed files onto k8s (kube-node) hosts
ansible -i inventory/seba-pod/hosts.ini kube-node -m copy -a "src=~/seba-control-repo/att-seba-pod.yaml dest=~/"
ansible -i inventory/seba-pod/hosts.ini kube-node -m copy -a "src=~/seba-control-repo/onos.yaml dest=~/"
ansible -i inventory/seba-pod/hosts.ini kube-node -m copy -a "src=~/seba-control-repo/scripts dest=~/"
ansible -i inventory/seba-pod/hosts.ini kube-node -m copy -a "src=~/seba-control-repo/radius-netcfg.json dest=~/"
ansible -i inventory/seba-pod/hosts.ini kube-node -m copy -a "src=~/seba-pod-ca/ca/ca.crt dest=~/seba-pod-ca.crt"
ansible -i inventory/seba-pod/hosts.ini kube-node -m copy -a "src=~/seba-control-repo/provisioning-yaml dest=~/"

# OPTIONAL!! add /etc/hosts entries for control-repo host ip.  NOT NEEDED IF USING DNS
# ansible -i inventory/seba-pod/hosts.ini kube-node -m shell -a "echo '10.64.1.169    repo.seba.local' >> /etc/hosts" --become --become-user=root

# Install POD CA cert
ansible -i inventory/seba-pod/hosts.ini kube-node -m shell -a "cp /home/non-root-user/seba-pod-ca.crt /usr/local/share/ca-certificates/; update-ca-certificates" --become --become-user=root

# Initialize helm repos
ansible -i inventory/seba-pod/hosts.ini kube-node -a "helm init --client-only --stable-repo-url http://repo.seba.local/charts/"
ansible -i inventory/seba-pod/hosts.ini kube-node -a "helm repo update"

# Allow not-root-user to run docker commands
ansible -i inventory/seba-pod/hosts.ini kube-node -m shell -a "usermod -aG docker non-root-user" --become --become-user=root
ansible -i inventory/seba-pod/hosts.ini kube-node -m shell -a "cat ~/scripts/bashrc >> ~/.bashrc"

# Reboot all 3.  Be sure you know what your doing
#ansible -i inventory/seba-pod/hosts.ini kube-node -a "reboot" --become --become-user=root


# From here steps are run on k8s nodes themselves, seba-node1 seba-node2 seba-node3.  See postinstall. 
